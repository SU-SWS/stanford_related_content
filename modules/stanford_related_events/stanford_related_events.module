<?php
/**
 * @file
 * Code for the Stanford Related Events feature.
 */

include_once 'stanford_related_events.features.inc';


/**
 * Implements hook_views_default_views_alter().
 */
function stanford_related_events_views_default_views_alter(&$views) {
  stanford_related_events_alter_upcoming_block($views);
  stanford_related_events_alter_upcoming_page($views);
  stanford_related_events_alter_manage_events($views);


}
/* *
 * Add related content to the page display or upcoming_events_page_list
 *
 * @param object $views
 *   Array of views.
 */

function stanford_related_events_alter_upcoming_page(&$views) {

  // Add related content to the exposed filter
  $page_result = stanford_related_content_add_exposed_filter($views, 'stanford_events_views', 'page', TRUE);
  $upcoming_page_result = stanford_related_content_add_exposed_filter($views, 'stanford_events_views', 'upcoming_events_list_page', TRUE);

  return ($page_result || $upcoming_page_result);
}
/**
 * Add exposed filter for related content to the page display.
 *
 * @param object $views
 *   Array of views.
 * @param string $name
 *    View to be altered.
 */
function stanford_related_events_alter_manage_events(&$views) {
  $view_name = 'stanford_events_manage';
  if (array_key_exists($view_name, $views)) {
    $view = $views[$view_name];
  }
  else {
    return FALSE;
  }

  $display_name = 'page';
  if ($view->set_display($display_name)) {
    $handler = $view->display_handler;
  }
  else {
    watchdog('stanford_related_events', "Display %display_name not available in view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Add the exposed filter.
  stanford_related_content_add_exposed_filter($views, $view_name, $display_name, FALSE);


  /**
   * Add event series column to manage events view.
   * @var [type]
   */
  /*
  if ($view->name == 'stanford_events_manage' && $view->current_display == "page") {

    // Get all of the page fields.
    $items = $view->get_items("field", "page");

    // Let us re-arrange the fields.
    foreach ($items as $field_name => $value) {

      // Got to remove the item to change the order.
      $view->set_item("page", "field", $field_name, NULL);

      // If the field is the event type field we want to insert the series after.
      if ($field_name == "field_s_event_type") {
        // Set the event field type first.
        $view->set_item("page", "field", $field_name, $value);

        // Then create the multiple value field using UL list.
        $view->add_item($view->current_display, 'field', 'field_data_field_s_event_series', 'field_s_event_series', array(
            'label' => t('Event series'),
            'element_default_classes' => 1,
            'element_label_colon' => 0,
            'hide_empty' => 1,
            'settings' => array(
              'link' => 1,
            ),
            'group_type' => "group",
            'group_rows' => 1,
            'multi_type' => "ul",
          ),
          'field_s_event_series');

        continue;
      }

      // All other items just get saved in the same order.
      $view->set_item("page", "field", $field_name, $value);

    }

  }
*/

  // Add Field: Content: Related Content.
  $type = 'fields';
  $table = 'field_data_field_s_related_content';
  $field = 'field_s_related_content';
  $after_field = 0;

  $options = $handler->get_option($type);
  $options['field_s_related_content']['id'] = $field;
  $options['field_s_related_content']['table'] = $table;
  $options['field_s_related_content']['field'] = $field;
  $options['field_s_related_content']['type'] = 'taxonomy_term_reference_plain';
  $options['field_s_related_content']['delta_offset'] = '0';
  $options['field_s_related_content']['multi_type'] = 'ul';

  stanford_related_content_insert_item ($views, $view_name, $display_name, $type, $table, $field, $options,
    $after_field);

  // Add VBO option.
  // VBO 7.x-3.2
  if (isset($options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action']
  ['settings'])) {
    $options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action']
      ['settings']['display_values']['stanford_event::field_s_related_content'] = 'stanford_event::field_s_related_content';
  }

  // VBO 7.x-3.0-rc1
  elseif (is_array($options['views_bulk_operations']['vbo']['operations']['action::views_bulk_operations_modify_action']
  ['settings']['display_values'])){
    $options['views_bulk_operations']['vbo']['operations']['action::views_bulk_operations_modify_action']
     ['settings']['display_values']['stanford_event::field_s_related_content'] = 'stanford_event::field_s_related_content';
  }
  else {
    $options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action'] =
       array(
        'selected' => 1,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 1,
        'label' => 'Modify',
        'settings' => array(
          'show_all_tokens' => 0,
          'display_values' => array(
            'stanford_event::field_s_event_type' => 'stanford_event::field_s_event_type',
            'stanford_event::field_s_related_content' => 'stanford_event::field_s_related_content',
          ),
        ),
      );
  }


  $handler->set_option('fields', $options);

  // Check that the view still works after we altered it!
  if (stanford_related_content_validate_view($views[$view_name], 'stanford_related_events')) {
    watchdog('stanford_related_events', "Filter 'field_s_related_content' added to  view %view_name.",
      array('%view_name' => $view_name), WATCHDOG_DEBUG);
    return TRUE;
  }
  return FALSE;
}


/**
 * Copy the block display in the stanford_events_view and add contextual filter.
 *
 * @param object $views
 *   Array of views.
 */
function stanford_related_events_alter_upcoming_block(&$views) {
  $view_name = 'stanford_events_views';
  if (array_key_exists($view_name, $views)) {
    $view = $views[$view_name];
  }
  else {
    watchdog('stanford_related_events', "View '%name' not available.",
      array('%name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }

  // Get the page URL
  $page_handler = null;
  if (isset($view->display['page'])) {
    if ($view->set_display('page')) {
      $page_handler = $view->display_handler;
    }
  }
  // Is it overridden?
  elseif (isset($view->display['upcoming_events_list_page'])){
    if ($view->set_display('upcoming_events_list_page')){
      $page_handler = $view->display_handler;
    }
  }
  if ($page_handler == null) {
    watchdog('stanford_related_events', "Display not available in view %view_name.",
      array('%view_name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }
  $page_path = $page_handler->get_option('path');

  // Copy the block display.
  $handler = stanford_related_content_copy_display($views, $view_name, 'block', 'Filtered Upcoming Block', 'filtered_upcoming_block');
  if ($handler == FALSE) {
    return FALSE;
  }

  // Add contextual filter and more link
  $handler = stanford_related_content_add_contextual_filter($handler);
  $handler = stanford_related_content_add_footer_more_link($handler, $page_path);

  // Check that the view still works after we altered it!
  if (stanford_related_content_validate_view($views[$view_name], 'stanford_related_events')) {
    watchdog('stanford_related_events', "Block 'filtered_upcoming_block' added to view %view_name.",
      array('%view_name' => $view_name), WATCHDOG_DEBUG);
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_views_pre_build().
 *
 *   This rewrites the pattern in the footer of the view and replaces it
 *   with a link to the related view page.
 */
function stanford_related_events_views_pre_build(&$view) {
  if ($view->name == "stanford_events_views"){
    if (($view->current_display == "filtered_upcoming_block") ||
      ($view->current_display == "block_5")) {
      $subject = $view->footer["area"]->options["content"];
      $view->footer["area"]->options["content"] = stanford_related_content_add_more_link($subject, "See more related events");
    }
  }
}
