<?php
/**
 * @file
 *
 */

/**
 * Utility Functions ----------------------------------------------------------------------------
 **/

/*
 * This rewrites the pattern in the subject. It replaces it with
 * 1) the link text
 * 2) a link built with the url in the subject plus the taxonomy terms
 *
 */
function stanford_related_content_add_more_link($subject, $link_text = "See more", $pattern = "/\[hook_views_pre_build:.*\]/" ){
  $matches = array();
  preg_match($pattern, $subject, $matches);
  if (!empty($matches)) {

    // Build the URL.
    $parts = explode(":", $matches[0]);
    $url = str_replace("]", "", $parts[1]);
    $options = array( 'attributes' => array( 'class' => array('more-link') ),
      'query' => array( stanford_related_content_build_tax_args() )
    );
    $a = l(t($link_text), $url, $options);

    // Replace text with the URL.
    $subject = preg_replace($pattern, $a, $subject);
  }
  return $subject;
}

/*
 * This takes the related_content terms from the current node and builds them into arguments for link options.
 *
 * @returns array of arguments
 */
function stanford_related_content_build_tax_args() {
  $result = array();
  if (arg(0) == 'node') {
    $nid = arg(1);
    if (is_numeric($nid)) {
      $node = node_load($nid);
      if ((!is_null($node)) && (isset($node->field_s_related_content['und']))) {
        foreach ($node->field_s_related_content['und'] as $key => $value) {
          $result['term_node_tid_depth[' . $key . ']'] = $value['tid'];
        }
      }
    }
  }
  return $result;
}

/*
 * Validates a view and sets a notice if it doesn't validate.
 *
 * @param view
 * @param name
 *   the name of the module
 *
 */
function stanford_related_content_validate_view($view, $name = 'stanford_related_content') {

  if ($view->validate()) {
    return TRUE;
  }
  else {
    watchdog($name, "Could not validate view: %name (%title).",
      array('%name' => $view->name,
        '%title' => $view->get_title()),
      WATCHDOG_NOTICE);
    return FALSE;
  }
}
/*
 * Given a view and display, this adds the related content exposed filter to the display
 *
 * @param $view
 *   View to be altered
 * @param string $view_name
 *   View to be altered.
 * @param string $display_name
 *   Display to be altered.
 * @param boolean $multiple
 *   Indicates if the filter should be multiple select
 */
function stanford_related_content_add_exposed_filter($views, $view_name, $display_name = 'page', $multiple = FALSE, $label = "Filter by related content") {
  if (array_key_exists($view_name, $views)) {
    $view = $views[$view_name];
  }
  else {
    watchdog('stanford_related_content', "View %view_name not available.",
      array('%view_name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }

  if ($view->set_display($display_name)) {
    $handler = $view->display_handler;
  }
  else {
    watchdog('stanford_related_content', "Display %display_name not available in view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }

  $options = $handler->get_option('filters');
  $options['term_node_tid_depth']['id'] = 'term_node_tid_depth';
  $options['term_node_tid_depth']['table'] = 'node';
  $options['term_node_tid_depth']['field'] = 'term_node_tid_depth';
  $options['term_node_tid_depth']['exposed'] = TRUE;
  $options['term_node_tid_depth']['expose']['operator_id'] = 'term_node_tid_depth_op';
  $options['term_node_tid_depth']['expose']['label'] = $label;
  $options['term_node_tid_depth']['expose']['operator'] = 'term_node_tid_depth_op';
  $options['term_node_tid_depth']['expose']['identifier'] = 'term_node_tid_depth';
  $options['term_node_tid_depth']['expose']['multiple'] = $multiple;
  $options['term_node_tid_depth']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    6 => 0,
    5 => 0,
    4 => 0,
    3 => 0,
    9 => 0,
    7 => 0,
    8 => 0,
  );
  $options['term_node_tid_depth']['type'] = 'select';
  $options['term_node_tid_depth']['vocabulary'] = 'stanford_related_content';
  $options['term_node_tid_depth']['hierarchy'] = 1;
  $options['term_node_tid_depth']['depth'] = '0';

  $handler->set_option('filters', $options);

  // Check that the view still works after we altered it!
  if (stanford_related_content_validate_view($views[$view_name], 'stanford_related_content')) {
    watchdog('stanford_related_content', "Filter 'stanford_related_content' added to display %display_name on view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_DEBUG);
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/*
 * Given a view and display, this adds the related content VBO to the display
 *
 * @param $view
 *   View to be altered
 * @param string $view_name
 *   View to be altered.
 * @param string $display_name
 *   Display to be altered.
 * @param boolean $multiple
 *   Indicates if the filter should be multiple select
 */
function stanford_related_content_add_vbo($views, $view_name, $display_name = 'page') {
  if (array_key_exists($view_name, $views)) {
    $view = $views[$view_name];
  }
  else {
    watchdog('stanford_related_content', "View %view_name not available.",
      array('%view_name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }

  if ($view->set_display($display_name)) {
    $handler = $view->display_handler;
  }
  else {
    watchdog('stanford_related_content', "Display %display_name not available in view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_DEBUG);
    return FALSE;
  }

  $options = $handler->get_option('fields');

  // Add VBO option.
  // VBO 7.x-3.2
  if (isset($options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action']
  ['settings'])) {
    $options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action']
    ['settings']['display_values']['stanford_event::field_s_related_content'] = 'stanford_event::field_s_related_content';
  }

  // VBO 7.x-3.0-rc1
  elseif (is_array($options['views_bulk_operations']['vbo']['operations']['action::views_bulk_operations_modify_action']
  ['settings']['display_values'])) {
    $options['views_bulk_operations']['vbo']['operations']['action::views_bulk_operations_modify_action']
    ['settings']['display_values']['stanford_event::field_s_related_content'] = 'stanford_event::field_s_related_content';
  }
  else {
    $options['views_bulk_operations']['vbo_operations']['action::views_bulk_operations_modify_action'] =
      array(
        'selected' => 1,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 1,
        'label' => 'Modify',
        'settings' => array(
          'show_all_tokens' => 0,
          'display_values' => array(
            'stanford_event::field_s_event_type' => 'stanford_event::field_s_event_type',
            'stanford_event::field_s_related_content' => 'stanford_event::field_s_related_content',
          ),
        ),
      );
  }


  $handler->set_option('fields', $options);

  // Check that the view still works after we altered it!
  if (stanford_related_content_validate_view($views[$view_name], 'stanford_related_content')) {
    watchdog('stanford_related_content', "Filter 'stanford_related_content' added to display %display_name on view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_DEBUG);
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/*
 * Return the handler to a copy of a display
 *
 */
function stanford_related_content_copy_display($views, $view_name, $display_name, $new_title = NULL, $new_id = NULL) {
  if (array_key_exists($view_name, $views)) {
    $view = $views[$view_name];
  }
  else {
    watchdog('stanford_related_content', "View '%view_name' not available.",
      array('%view_name' => $view_name), WATCHDOG_NOTICE);
    return FALSE;
  }

  if ($view->set_display($display_name)) {
    $display_orig = $view->display_handler;
  }
  else {
    watchdog('stanford_related_content', "Display %display_name not available in view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Get the type of display
  $type = $display_orig->display->display_plugin;

  // Get the display options.
  if (isset($display_orig->handler->display->display_options)) {
    $options_orig = $display_orig->handler->display->display_options;
  }
  elseif (isset($display_orig->display->display_options)) {
    $options_orig = $display_orig->display->display_options;
  }
  else {
    watchdog('stanford_related_content', "Display options for display %display_name not available in view %view_name.",
      array('%display_name' => $display_name, '%view_name' => $view_name), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Copy the display options.
  $handler = $view->new_display($type, $new_title, $new_id);
  foreach ($options_orig as $key => $value) {
    $handler->set_option($key, $value);
  }
  return $handler;
}

/*
 * Adds the related content to the contextual filter in the given display
 *
 */
function stanford_related_content_add_contextual_filter($display_handler) {

  // Override defaults.
  $options = $display_handler->get_option('defaults');
  $options['arguments'] = FALSE;
  $display_handler->set_option('defaults', $options);

  // Add the contextual filter.
  $options = $display_handler->get_option('arguments');
  $options['term_node_tid_depth']['id'] = 'term_node_tid_depth';
  $options['term_node_tid_depth']['table'] = 'node';
  $options['term_node_tid_depth']['field'] = 'term_node_tid_depth';
  $options['term_node_tid_depth']['default_action'] = 'default';
  $options['term_node_tid_depth']['title_enable'] = TRUE;
  $options['term_node_tid_depth']['title'] = 'Related Upcoming Events ';
  $options['term_node_tid_depth']['default_argument_type'] = 'taxonomy_tid';
  $options['term_node_tid_depth']['default_argument_options']['node'] = TRUE;
  $options['term_node_tid_depth']['default_argument_options']['anyall'] = '+';
  $options['term_node_tid_depth']['default_argument_options']['vocabularies'] = array(
    'stanford_related_content' => 'stanford_related_content',
  );
  $options['term_node_tid_depth']['summary']['number_of_records'] = '0';
  $options['term_node_tid_depth']['summary']['format'] = 'default_summary';
  $options['term_node_tid_depth']['summary_options']['items_per_page'] = '25';
  $options['term_node_tid_depth']['specify_validation'] = TRUE;
  $options['term_node_tid_depth']['depth'] = '0';
  $options['term_node_tid_depth']['break_phrase'] = TRUE;

  $display_handler->set_option('arguments', $options);
  return $display_handler;

}
/*
 * Adds a more link to footer of the given display
 *
 */
function stanford_related_content_add_footer_more_link($display_handler, $url) {

  // Override defaults.
  $options = $display_handler->get_option('defaults');
  $options['link_display'] = FALSE;
  $options['footer'] = FALSE;
  $options['empty'] = FALSE; // No results behavior: Override so nothing displays when no results.
  $display_handler->set_option('defaults', $options);

  $display_handler->set_option('use_more', FALSE);
  $display_handler->set_option('use_more_always', FALSE);

  // Footer: Global: See more link.
  $options = $display_handler->get_option('footer');
  $options['area']['id'] = 'area';
  $options['area']['table'] = 'views';
  $options['area']['field'] = 'area';
  $options['area']['ui_name'] = 'Global: See more link';
  $options['area']['content'] = '[hook_views_pre_build:' . $url . ']';
  $options['area']['format'] = 'content_editor_text_format';
  $options['area']['tokenize'] = TRUE;

  $display_handler->set_option('footer', $options);
  return $display_handler;
}

/*
 * Adds the related content field after the location field.
 * This would be used for the manage content view.
 *
 * @param string $view
 *   View to be altered.
 * @param string $display_id
 *   Display to be altered
 *
 */
function stanford_related_content_insert_related_content(&$view, &$display_id, $after_field) {

  $options['field_s_related_content']['id'] = 'field';
  $options['field_s_related_content']['table'] = 'field_data_field_s_related_content';
  $options['field_s_related_content']['field'] = 'field';
  $options['field_s_related_content']['type'] = 'taxonomy_term_reference_plain';
  $options['field_s_related_content']['delta_offset'] = '0';
  $options['field_s_related_content']['multi_type'] = 'ul';

  stanford_related_content_insert_item($view, $display_id, 'field', 'field_data_field_s_related_content', 'field_s_related_content', $options, $after_field);
}

/*
 * Adds the field after the given field.
 *
 * @param string $view
 *   View to be altered.
 * @param string $display_id
 *   Display to be altered
 * @param string $type
 *   Type of item to be altered
 * @param string $table
 *   Table name of the item to be inserted
 *  @param string $field
 *   Name of the item to be inserted
 *  @param array $options
 *   options to be included when inserting the item
 *  @param string $after_field
 *    Name of field to insert after, if it is 0, it is inserted first.
 *
 */
function stanford_related_content_insert_item($view, $display_id, $type, $table, $field, $options = array(),
                                                $after_field = NULL) {

  if (!$view->set_display($display_id)) {
    watchdog('stanford_related_content', "Display %display_id not available in view %view_name.",
      array('%display_id' => $display_id, '%view_name' => $view->name), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Get all of the fields.
  $items = $view->get_items($type, $display_id);
  $added_item = FALSE;

  if ($after_field == NULL) {
    // Add it first
    $view->add_item($view->current_display, $type, $table, $field, $options);
    $added_item = TRUE;
  }

  // Re-arrange the fields.
  foreach ($items as $field_name => $value) {

    // Need to remove the item to change the order.
    $view->set_item($display_id, $type, $field_name, NULL);

    // Don't add it twice.
    if (!$added_item) {

      // If the field is the field we want, insert the new field after.
      if ($field_name == $after_field) {
        // Set the event field type first.
        $view->set_item($display_id, $type, $field_name, $value);

        // Then add the new item
        $view->add_item($display_id, $type, $table, $field, $options);
        $added_item = TRUE;


        continue;
      }
    }
    // All other items just get saved in the same order.
    $view->set_item($display_id, $type, $field_name, $value);
  }

  // if we didn't find the after_field, append the new field.
  if (!$added_item) {
    $view->add_item($display_id, $type, $table, $field, $options);
  }
}
